---
title: "Lab 9"
author: "Erin Cagle"
format: html
editor: visual
embed-resources: true
---

## Lab 9

## Vectorization

```{r}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

Question 1.

NOTE: for the times when it asked to use benchmarking, I hade to switch to system.time. When running the code in Rstudio, micro benchmarking worked fine. However, when trying to render the doc I continuously got this error which occured even after following the solution.

Error in \`contrib.url()\`:
! trying to use CRAN without setting a mirror
Backtrace:
 1. utils::install.packages("microbenchmark")
2. utils::contrib.url(repos, "source")
Execution halted

```{r}
fun1 <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  
  for (i in 1:n){
    x <- rbind(x, rpois(k, lambda))    
  }
  
  return(x)
}

fun1alt <- function(n = 100, k = 4, lambda = 4) {
  # YOUR CODE HERE
  x <- matrix(rpois(n*k, lambda), nrow = n, byrow = TRUE)
  return(x)
}

fun1out <- fun1(100)
fun1altout <- fun1alt(100)

dim(fun1out)
dim(fun1altout)

# Benchmarking: 

system.time(replicate(1000, fun1()))
system.time(replicate(1000, fun1alt()))


```

Question 2.

```{r}
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)

# Find each column's max value
fun2 <- function(x) {
  apply(x, 2, max)
}

#based on reading maxcol documentation, it only returns the index of the max for each row. this is not what the original function provided does, so it cannot return the same values
# fun2alt <- function(x) {
#   max.col(x)
# }

library(splus2R)
fun2alt <- function(x) {
 colMaxs(x)
}

alt <- function(x) {
  x[max.col(x)]
}

out2 <- fun2(x)
length(out2)
out2alt <- fun2alt(x)
length(out2alt)
# output using the maxl.col function as suggested in the lab 
outalt <- alt(x)
length(outalt)

system.time(replicate(1000, fun2(x)))
system.time(replicate(1000, fun2alt(x)))
system.time(replicate(1000, alt(x)))

```

The max.col function does not do the same thing as the function provided using apply. The function created using apply return 1000 values, which are the maxes for each column. The max.col function returns the column location of the max for each row. Therefore, it only returns 10 values. To get the same output as the provided function I used the colMax function which returns the same values as the apply function, but is slower. The max.col function is faster, but does not return the same values.

## Parallelization

Question 1.

```{r}
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
  
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  
 
  # EDITED THIS CODE:
  cl <- makeCluster(ncpus)
  clusterExport(cl,c("R", "my_stat"))
  ans <- parLapply(cl, seq_len(R), function(i) {
  stat(dat[idx[, i], , drop = FALSE])
  })

  
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)

  return(ans)
}
```

Question 2.

```{r}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))

# DATA SIM
set.seed(1)
n <- 500; R <- 1e4

x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
 

# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x,y) , my_stat, R = R, ncpus = 2L)

# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
```

Question 3.

```{r}
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```
